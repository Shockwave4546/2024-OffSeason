import groovy.json.JsonSlurper
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
  id "java"
  id "org.jetbrains.kotlin.jvm" version "2.0.21"
  id "edu.wpi.first.GradleRIO" version "2025.1.1-beta-2"
  id "com.peterabeles.gversion" version "1.10.2"
  id "idea"
}

def javaVersion = JavaVersion.VERSION_17
def kotlinJvmTarget = JvmTarget.@Companion.fromTarget(javaVersion.toString())

java {
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
}

def ROBOT_MAIN_CLASS = "org.shockwave.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
  targets {
    roborio(getTargetTypeClass('RoboRIO')) {
      // Team number is loaded either from the .wpilib/wpilib_preferences.json
      // or from command line. If not found an exception will be thrown.
      // You can use getTeamOrDefault(team) instead of getTeamNumber if you
      // want to store a team number in this file.
      team = project.frc.getTeamNumber()
      debug = project.frc.getDebugOrDefault(false)

      artifacts {
        // First part is artifact name, 2nd is artifact type
        // getTargetTypeClass is a shortcut to get the class type using a string

        frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
        }

        // Static files artifact
        frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
          files = project.fileTree('src/main/deploy')
          directory = '/home/lvuser/deploy'
        }
      }
    }
  }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

repositories {
  maven {
    url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
    credentials {
      username = "Mechanical-Advantage-Bot"
      password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
    }
  }
  mavenCentral()
  mavenLocal()
}

dependencies {
  implementation wpi.java.deps.wpilib()
  implementation wpi.java.vendor.java()

  roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
  roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

  roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
  roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

  nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
  nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
  simulationDebug wpi.sim.enableDebug()

  nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
  nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
  simulationRelease wpi.sim.enableRelease()

  implementation 'gov.nist.math:jama:1.0.3'

  def akitJson = new JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
  annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"
}

tasks.register('replayWatch', JavaExec) {
  mainClass = "org.littletonrobotics.junction.ReplayWatch"
  classpath = sourceSets.main.runtimeClasspath
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.allSource
  manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile).configureEach {
  // Configure string concat to always inline compile
  options.compilerArgs.add '-XDstringConcat=inline'
}

kotlin {
  compilerOptions {
    jvmTarget.set(kotlinJvmTarget)
    // https://kotlinlang.org/docs/gradle-configure-project.html#gradle-java-toolchains-support
    jvmToolchain(Integer.valueOf(javaVersion.toString()))
  }

  compileKotlin {
    dependsOn.add(tasks.createVersionFile)
  }
}

gversion {
  srcDir = "src/main/kotlin/"           // path is relative to the sub-project by default
  // Gradle variables can also be used
  // E.g. "${project.rootDir}/module/src/main/java"
  classPackage = "org.shockwave"
  className = "BuildConstants"                // optional. If not specified GVersion is used
  dateFormat = "yyyy-MM-dd'T'HH:mm:ss'Z'" // optional. This is the default
  timeZone = "EST"                      // optional. UTC is default
  debug = false                      // optional. print out extra debug information
  language = "kotlin"                     // optional. Can be Java, Kotlin, YAML, or Properties. Case insensitive.
  explicitType = false                      // optional. Force types to be explicitly printed
  indent = "\t"                       // optional. Change how code is indented. 1 tab is default.
  annotate = false                      // optional. Java only. Adds @Generated annotation
}


idea {
  project {
    // The project.sourceCompatibility setting is not always picked up, so we set explicitly
    languageLevel = javaVersion
  }
  module {
    // Improve development & (especially) debugging experience (and IDEA's capabilities) by having libraries' source & javadoc attached
    downloadJavadoc = true
    downloadSources = true
    // Exclude the .vscode directory from indexing and search
    excludeDirs += file(".vscode")
  }
}